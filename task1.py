# -*- coding: utf-8 -*-
"""Task1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DaOxYG8BtugqmNeL3Z0CEVuEp6QJHeBb

**LetsGrowMore**

Data Science Intern

Name:-Anuradha Ananda Nerkar

IRIS Flowers Classification ML project

Importing Libraries
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import seaborn as sns
sns.set_palette('husl')
import matplotlib.pyplot as plt
# %matplotlib inline

from sklearn import metrics
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

"""Read Data File"""

ds=pd.read_csv('/Iris.csv')

"""First Five line of dataset"""

ds.head()

"""Summary of dataset"""

ds.info()

ds.shape

ds.describe()

"""Checking NA values"""

ds.isnull().sum()

ds.columns

ds['Species'].value_counts()

"""Data Visualization

"""

temp=ds.drop('Id', axis=1)
temp.head()

"""Pairplot"""

pair=sns.pairplot(temp, hue='Species', markers='+')
plt.show()

"""violinplot"""

a = sns.violinplot(y='Species', x='SepalLengthCm', data=ds, inner='quartile')
plt.show()
b = sns.violinplot(y='Species', x='SepalWidthCm', data=ds, inner='quartile')
plt.show()
c = sns.violinplot(y='Species', x='PetalLengthCm', data=ds, inner='quartile')
plt.show()
d = sns.violinplot(y='Species', x='PetalWidthCm', data=ds, inner='quartile')
plt.show()

"""Modeling with scikit-learn"""

x= ds.drop(['Id', 'Species'], axis=1)
y= ds['Species']
print(x.shape)
print(y.shape)

"""Train and test on the dataset"""

krange=list(range(1,26))
scores=[]
for k in krange:
    knn = KNeighborsClassifier(n_neighbors=k)
    knn.fit(x, y)
    y_pred = knn.predict(x)
    scores.append(metrics.accuracy_score(y, y_pred))
    
plt.plot(krange, scores)
plt.xlabel('Value of k for KNN')
plt.ylabel('Accuracy Score')
plt.title('Accuracy Scores for Values of k of k-Nearest-Neighbors')
plt.show()

logreg = LogisticRegression()
logreg.fit(x, y)
y_pred = logreg.predict(x)
print(metrics.accuracy_score(y, y_pred))

"""Split the dataset into training set and testing set"""

X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.4, random_state=5)
print(X_train.shape)
print(y_train.shape)
print(X_test.shape)
print(y_test.shape)

krange=list(range(1,26))
scores=[]
for k in krange:
    knn = KNeighborsClassifier(n_neighbors=k)
    knn.fit(X_train, y_train)
    y_pred = knn.predict(X_test)
    scores.append(metrics.accuracy_score(y_test, y_pred))
    
plt.plot(krange, scores)
plt.xlabel('Value of k for KNN')
plt.ylabel('Accuracy Score')
plt.title('Accuracy Scores for Values of k of k-Nearest-Neighbors')
plt.show()

logreg = LogisticRegression()
logreg.fit(X_train, y_train)
y_pred = logreg.predict(X_test)
print(metrics.accuracy_score(y_test, y_pred))

"""Using KNN to Model Iris Species Prediction with k=12"""

knn = KNeighborsClassifier(n_neighbors=12)
knn.fit(x, y)

knn.predict([[6, 3, 4, 2]])