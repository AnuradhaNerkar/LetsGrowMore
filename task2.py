# -*- coding: utf-8 -*-
"""Task2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qwA7Z7sqmRxaGR0mhySzNVXlPYQyjSqI

**LetsGrowMore**

Data Science Intern

Name:-Anuradha Ananda Nerkar

Stock Market Prediction And Forecasting Using Stacked LSTM

Importing Libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

"""Loading Dataset"""

df = pd.read_csv('/content/NSE-TATAGLOBAL.csv')
train_set=df.iloc[:,1:2].values

"""First Five lines of Dataset"""

df.head()

df.shape

df.info()

df.describe()

"""Checking NA values"""

df.isnull().sum()

"""Data Normalization"""

from sklearn.preprocessing import MinMaxScaler
sc=MinMaxScaler(feature_range=(0,1))
training_set_scale=sc.fit_transform(train_set)

"""Incorporating Timesteps into Data"""

X_train=[]
Y_train=[]
for i in range(60,2035):
  X_train.append(training_set_scale[i-60:i,0])
  Y_train.append(training_set_scale[i-50:i,0])
X_train,Y_train=np.array(X_train),np.array(Y_train)

X_train=np.reshape(X_train,(X_train.shape[0],X_train.shape[1],1))

"""LSTM Model"""

from keras.models import Sequential
from keras.layers import LSTM
from keras.layers import Dropout
from keras.layers import Dense

model =Sequential()

model.add(LSTM(units=50,return_sequences=True,input_shape=(X_train.shape[1],1) ))
model.add(Dropout(0.2))

model.add(LSTM(units=50,return_sequences=True ))
model.add(Dropout(0.2))

model.add(LSTM(units=50,return_sequences=True ))
model.add(Dropout(0.2))

model.add(LSTM(units=50))
model.add(Dropout(0.2))

model.add(Dense(units=1))

model.compile(optimizer ='adam',loss='mean_squared_error')

model.fit(X_train,Y_train,epochs=100,batch_size=32)

"""Making Predictions on test set"""

df_test=pd.read_csv('/content/NSE-TATAGLOBAL.csv')
real_stock_price=df_test.iloc[:,1:2].values

df_total=pd.concat((df['Open'],df_test['Open']),axis=0)
inputs=df_total[len(df_total)-len(df_test)-60:].values
inputs=inputs.reshape(-1,1)
inputs=sc.transform(inputs)
X_test=[]
for i in range(60,76):
  X_test.append(inputs[i-60:i,0])
X_test=np.array(X_test)
X_test=np.reshape(X_test,(X_test.shape[0],X_test.shape[1],1))
predicted_stock_price=model.predict(X_test)
predicted_stock_price=sc.inverse_transform(predicted_stock_price)

"""Plot The results"""

plt.plot(real_stock_price,color='red',label="Stock Price")
plt.plot(predicted_stock_price,color='green',label="predicted Stock price")
plt.title("TATA Stock Price Prediction")
plt.xlabel("Time")
plt.ylabel("Stock Price")
plt.legend()
plt.show()